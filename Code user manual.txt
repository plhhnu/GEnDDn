We used Python 3.6 and tensorflow-gpu 2.6.0. The GEnDDn framework is mainly composed of three folders (i.e., "data1", "data2", and "src") and several python files. The folders "data1" and "data2" represent the lncRNADisease dataset and the MNDR dataset, respectively, which provide the disease semantic similarity matrix, the lncRNA functional similarity matrix and the lncRNA-disease association (LDA) matrix. The "src" folder provides the source codes of the dual-net neural (DLDN) architecture. The "Net.py" file provides the source codes of the deep neural network (DNN) model. The detailed implementation steps of GEnDDn are as follows:
Step 1: Feature extraction
A. Data import
First, importing two python packages: “pandas” (version 1.1.5) and “numpy” (version 1.19.5). Next, using the "read.csv" function in pandas to read the lncRNA similarity matrix, the disease similarity matrix, and the LDA matrix. Finally, using numpy to achieve data type conversion.
B. Linear feature extraction
"linear_feature.py" provides the source codes of the non-negative matrix factorization (NMF) algorithm and the corresponding calling interface: the "get_low_feature" function. The "feature.py" file calls the NMF algorithm in "linear_feature.py" through the "get_low_feature" function. The NMF algorithm takes the LDA matrix as well as the number of features of lncRNAs and diseases as inputs.
C. Nonlinear feature extraction
"gate_trainer.py" provides the source codes of the graph attention auto-encoder (GATE) model. "gate_feature.py" provides the corresponding calling interface: the "get_gate_feature" function. The "feature.py" file trains the GATE model by introducing the "get_gate_feature" function in "gate_feature.py". The GATE algorithm takes the LDA matrix as well as the number of features of lncRNAs and diseases as inputs.
D. Feature integration
Running "feature.py" to get the linear feature matrix and nonlinear feature matrix of lncRNAs and diseases, respectively. Linear and nonlinear features of lncRNAs and diseases are respectively concatenated by using the "hstack" function in numpy. Finally generating the lncRNA feature matrix: "rna_feature.csv" and the disease feature matrix: "disease_feature.csv", which will be used as inputs of the lncRNA-disease pair (LDP) classification model in Step 2.
Step 2: LDP classification prediction
A. First, importing two python packages: “pandas” (version 1.1.5) and “numpy” (version 1.19.5). Next, using the "read.csv" function in pandas to read the LDA matrix, the lncRNA feature matrix "rna_feature.csv" and the disease feature matrix "disease_feature.csv" obtained in Step 1. Third, running the "data_handle.py" file and each lncRNA and disease are concatenated to form an LDP. Finally, each LDP is taken as a sample to generate a "data.csv" file.
B. Running the main file "main.py" for the GEnDDn model. "main.py" classifies all LDPs by importing four files (i.e., FIR.py, FIR_net.py, MaskOptimizer.py, MLP_l.py) in the "src" folder (codes of the DLDN model) and calling "Net.py" (codes of the DNN model). "main.py" directly calls the "kfold" function in the "CV.py" file to perform four different cross validations. 
C. Run the "main.py" file for 20 times to generate the average performance of GEnDDn over the 20 time experiments.